# Generated by Django 5.2.4 on 2025-10-30 19:35

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('badge_type', models.CharField(choices=[('verified', 'Verified Creator'), ('milestone', 'Milestone Achievement'), ('quality', 'Quality Content'), ('trending', 'Trending Creator'), ('top_earner', 'Top Earner')], max_length=20)),
                ('description', models.TextField(max_length=500)),
                ('icon', models.ImageField(upload_to='badges/')),
                ('min_followers', models.IntegerField(default=0)),
                ('min_videos', models.IntegerField(default=0)),
                ('min_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'badges',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'db_table': 'categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MonetizationRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate_type', models.CharField(choices=[('base_cpm', 'Base CPM (per 1000 views)'), ('engagement_bonus', 'Engagement Bonus'), ('premium_rate', 'Premium Content Rate'), ('platform_fee', 'Platform Fee Percentage')], max_length=30, unique=True)),
                ('value', models.DecimalField(decimal_places=4, max_digits=10)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('description', models.CharField(max_length=500)),
                ('is_active', models.BooleanField(default=True)),
                ('effective_from', models.DateTimeField()),
                ('effective_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'monetization_rates',
                'ordering': ['-effective_from'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('usage_count', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'tags',
                'ordering': ['-usage_count'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('viewer', 'Viewer'), ('creator', 'Creator'), ('admin', 'Admin')], default='viewer', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('google_id', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('is_creator', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('channel_name', models.CharField(blank=True, max_length=200)),
                ('wallet_balance', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('mpesa_number', models.CharField(blank=True, max_length=15)),
                ('paypal_email', models.EmailField(blank=True, max_length=254)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=200)),
                ('total_views', models.BigIntegerField(default=0)),
                ('total_followers', models.IntegerField(default=0)),
                ('total_following', models.IntegerField(default=0)),
                ('allow_messages_from_followers', models.BooleanField(default=True)),
                ('show_email_publicly', models.BooleanField(default=False)),
                ('email_notifications', models.BooleanField(default=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=1000)),
                ('like_count', models.IntegerField(default=0)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='streamin_application.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='streamin_application.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comment_likes',
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_message', models.TextField(blank=True, max_length=200)),
                ('last_message_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('participant1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations_as_p1', to=settings.AUTH_USER_MODEL)),
                ('participant2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations_as_p2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'conversations',
            },
        ),
        migrations.CreateModel(
            name='CreatorAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_views', models.IntegerField(default=0)),
                ('total_watch_time_minutes', models.BigIntegerField(default=0)),
                ('new_followers', models.IntegerField(default=0)),
                ('total_followers', models.IntegerField(default=0)),
                ('earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('videos_published', models.IntegerField(default=0)),
                ('live_streams', models.IntegerField(default=0)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'creator_analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'follows',
            },
        ),
        migrations.CreateModel(
            name='LiveStream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stream_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(max_length=2000)),
                ('thumbnail', models.ImageField(upload_to='streams/thumbnails/')),
                ('stream_type', models.CharField(choices=[('free', 'Free'), ('premium', 'Premium'), ('private', 'Private')], default='free', max_length=20)),
                ('ticket_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('stream_key', models.CharField(max_length=200, unique=True)),
                ('stream_url', models.URLField(blank=True)),
                ('rtmp_url', models.URLField(blank=True)),
                ('hls_url', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('live', 'Live Now'), ('ended', 'Ended'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('scheduled_start', models.DateTimeField()),
                ('scheduled_end', models.DateTimeField(blank=True, null=True)),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('allow_chat', models.BooleanField(default=True)),
                ('allow_reactions', models.BooleanField(default=True)),
                ('max_viewers', models.IntegerField(blank=True, null=True)),
                ('peak_viewers', models.IntegerField(default=0)),
                ('current_viewers', models.IntegerField(default=0)),
                ('total_viewers', models.IntegerField(default=0)),
                ('chat_messages', models.IntegerField(default=0)),
                ('reactions_count', models.IntegerField(default=0)),
                ('earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_recorded', models.BooleanField(default=True)),
                ('recording_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='streamin_application.category')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='live_streams', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'live_streams',
                'ordering': ['-scheduled_start'],
            },
        ),
        migrations.CreateModel(
            name='LiveStreamChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(max_length=500)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chats', to='streamin_application.livestream')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stream_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'live_stream_chat',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='LiveStreamTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(max_length=50)),
                ('transaction_id', models.CharField(max_length=200)),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='streamin_application.livestream')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stream_tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'live_stream_tickets',
            },
        ),
        migrations.CreateModel(
            name='LiveStreamViewer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('watch_duration', models.DurationField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='viewers', to='streamin_application.livestream')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='live_views', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'live_stream_viewers',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=2000)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='messages/attachments/')),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted_by_sender', models.BooleanField(default=False)),
                ('is_deleted_by_receiver', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='streamin_application.conversation')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PayoutRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payout_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('mpesa', 'M-Pesa'), ('paypal', 'PayPal'), ('bank_transfer', 'Bank Transfer')], max_length=20)),
                ('mpesa_number', models.CharField(blank=True, max_length=15)),
                ('paypal_email', models.EmailField(blank=True, max_length=254)),
                ('bank_account', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('transaction_id', models.CharField(blank=True, max_length=200)),
                ('rejection_reason', models.TextField(blank=True)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payout_requests', to=settings.AUTH_USER_MODEL)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_payouts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'payout_requests',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('playlist_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='playlists/')),
                ('privacy', models.CharField(choices=[('public', 'Public'), ('unlisted', 'Unlisted'), ('private', 'Private')], default='public', max_length=20)),
                ('video_count', models.IntegerField(default=0)),
                ('view_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'playlists',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_name', models.CharField(max_length=100)),
                ('monthly_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='active', max_length=20)),
                ('auto_renew', models.BooleanField(default=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to=settings.AUTH_USER_MODEL)),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'subscriptions',
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.CharField(blank=True, max_length=500)),
                ('is_public', models.BooleanField(default=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'system settings',
                'db_table': 'system_settings',
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by', to='streamin_application.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_badges',
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_play', models.BooleanField(default=True)),
                ('video_quality_preference', models.CharField(choices=[('360p', '360p'), ('480p', '480p'), ('720p', '720p HD'), ('1080p', '1080p Full HD'), ('1440p', '1440p 2K'), ('2160p', '2160p 4K')], default='720p', max_length=10)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_categories', models.ManyToManyField(blank=True, related_name='favorited_by', to='streamin_application.category')),
                ('preferred_creators', models.ManyToManyField(blank=True, related_name='preferred_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_preferences',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(max_length=5000)),
                ('video_file', models.FileField(upload_to='videos/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['mp4', 'mov', 'avi', 'mkv'])])),
                ('thumbnail', models.ImageField(upload_to='thumbnails/%Y/%m/%d/')),
                ('preview_gif', models.FileField(blank=True, null=True, upload_to='previews/%Y/%m/%d/')),
                ('duration', models.DurationField()),
                ('file_size', models.BigIntegerField()),
                ('quality', models.CharField(choices=[('360p', '360p'), ('480p', '480p'), ('720p', '720p HD'), ('1080p', '1080p Full HD'), ('1440p', '1440p 2K'), ('2160p', '2160p 4K')], default='720p', max_length=10)),
                ('video_type', models.CharField(choices=[('free', 'Free'), ('premium', 'Premium'), ('pay_per_view', 'Pay Per View')], default='free', max_length=20)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('processing', 'Processing'), ('published', 'Published'), ('unlisted', 'Unlisted'), ('private', 'Private'), ('removed', 'Removed')], default='draft', max_length=20)),
                ('allow_comments', models.BooleanField(default=True)),
                ('allow_likes', models.BooleanField(default=True)),
                ('allow_downloads', models.BooleanField(default=False)),
                ('is_age_restricted', models.BooleanField(default=False)),
                ('requires_login', models.BooleanField(default=False)),
                ('view_count', models.BigIntegerField(default=0)),
                ('like_count', models.IntegerField(default=0)),
                ('dislike_count', models.IntegerField(default=0)),
                ('comment_count', models.IntegerField(default=0)),
                ('download_count', models.IntegerField(default=0)),
                ('share_count', models.IntegerField(default=0)),
                ('earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('revenue_per_thousand_views', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('meta_title', models.CharField(blank=True, max_length=200)),
                ('meta_description', models.CharField(blank=True, max_length=300)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='videos', to='streamin_application.category')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='videos', to='streamin_application.tag')),
            ],
            options={
                'db_table': 'videos',
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('spam', 'Spam'), ('inappropriate', 'Inappropriate Content'), ('copyright', 'Copyright Violation'), ('harassment', 'Harassment'), ('hate_speech', 'Hate Speech'), ('violence', 'Violence'), ('misinformation', 'Misinformation'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(max_length=1000)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('reviewed', 'Reviewed'), ('action_taken', 'Action Taken'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('review_notes', models.TextField(blank=True)),
                ('action_taken', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='streamin_application.comment')),
                ('live_stream', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='streamin_application.livestream')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_made', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_reviewed', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports_against', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='streamin_application.video')),
            ],
            options={
                'db_table': 'reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlaylistVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(default=0)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='streamin_application.playlist')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_playlists', to='streamin_application.video')),
            ],
            options={
                'db_table': 'playlist_videos',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('video_upload', 'New Video Upload'), ('live_stream', 'Live Stream Starting'), ('comment', 'New Comment'), ('comment_reply', 'Comment Reply'), ('like', 'Video Liked'), ('follow', 'New Follower'), ('message', 'New Message'), ('purchase', 'Video Purchase'), ('subscription', 'New Subscriber'), ('payout', 'Payout Update'), ('system', 'System Notification')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField(max_length=500)),
                ('action_url', models.CharField(blank=True, max_length=500)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='streamin_application.comment')),
                ('from_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
                ('live_stream', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='streamin_application.livestream')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='streamin_application.video')),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='video',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='streamin_application.video'),
        ),
        migrations.CreateModel(
            name='VideoAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('views', models.IntegerField(default=0)),
                ('unique_viewers', models.IntegerField(default=0)),
                ('watch_time_minutes', models.BigIntegerField(default=0)),
                ('average_watch_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('likes', models.IntegerField(default=0)),
                ('dislikes', models.IntegerField(default=0)),
                ('comments', models.IntegerField(default=0)),
                ('shares', models.IntegerField(default=0)),
                ('earnings', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('direct_views', models.IntegerField(default=0)),
                ('search_views', models.IntegerField(default=0)),
                ('suggested_views', models.IntegerField(default=0)),
                ('external_views', models.IntegerField(default=0)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='streamin_application.video')),
            ],
            options={
                'db_table': 'video_analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='VideoCall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('call_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('duration_minutes', models.IntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('scheduled_time', models.DateTimeField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('missed', 'Missed')], default='scheduled', max_length=20)),
                ('room_id', models.CharField(blank=True, max_length=200)),
                ('join_url_creator', models.URLField(blank=True)),
                ('join_url_viewer', models.URLField(blank=True)),
                ('payment_status', models.CharField(default='pending', max_length=20)),
                ('transaction_id', models.CharField(blank=True, max_length=200)),
                ('is_recorded', models.BooleanField(default=False)),
                ('recording_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator_calls', to=settings.AUTH_USER_MODEL)),
                ('viewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='viewer_calls', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'video_calls',
                'ordering': ['-scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='EarningsRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earnings_type', models.CharField(choices=[('video_view', 'Video View'), ('video_purchase', 'Video Purchase'), ('live_stream', 'Live Stream'), ('video_call', 'Video Call'), ('subscription', 'Subscription'), ('bonus', 'Bonus')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=4, max_digits=10)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('description', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings', to=settings.AUTH_USER_MODEL)),
                ('live_stream', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='streamin_application.livestream')),
                ('video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='streamin_application.video')),
                ('video_call', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='streamin_application.videocall')),
            ],
            options={
                'db_table': 'earnings_records',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoDownload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('download_token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('download_url', models.URLField()),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('downloaded_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to='streamin_application.video')),
            ],
            options={
                'db_table': 'video_downloads',
            },
        ),
        migrations.CreateModel(
            name='VideoLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_like', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked_videos', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='streamin_application.video')),
            ],
            options={
                'db_table': 'video_likes',
            },
        ),
        migrations.CreateModel(
            name='VideoPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('mpesa', 'M-Pesa'), ('paypal', 'PayPal'), ('stripe', 'Credit/Debit Card')], max_length=20)),
                ('transaction_id', models.CharField(max_length=200, unique=True)),
                ('mpesa_receipt_number', models.CharField(blank=True, max_length=100)),
                ('mpesa_phone', models.CharField(blank=True, max_length=15)),
                ('payment_status', models.CharField(default='completed', max_length=20)),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchased_videos', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to='streamin_application.video')),
            ],
            options={
                'db_table': 'video_purchases',
            },
        ),
        migrations.CreateModel(
            name='VideoQuality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quality', models.CharField(choices=[('360p', '360p'), ('480p', '480p'), ('720p', '720p HD'), ('1080p', '1080p Full HD'), ('1440p', '1440p 2K'), ('2160p', '2160p 4K')], max_length=10)),
                ('video_file', models.FileField(upload_to='videos/qualities/%Y/%m/%d/')),
                ('file_size', models.BigIntegerField()),
                ('bitrate', models.IntegerField()),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_versions', to='streamin_application.video')),
            ],
            options={
                'db_table': 'video_qualities',
            },
        ),
        migrations.CreateModel(
            name='VideoRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=4, max_digits=5)),
                ('reason', models.CharField(max_length=200)),
                ('is_shown', models.BooleanField(default=False)),
                ('is_clicked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('shown_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_to', to='streamin_application.video')),
            ],
            options={
                'db_table': 'video_recommendations',
                'ordering': ['-score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('country', models.CharField(blank=True, max_length=100)),
                ('watch_duration', models.DurationField()),
                ('completion_percentage', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_monetized', models.BooleanField(default=False)),
                ('earnings_generated', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='video_views', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='streamin_application.video')),
            ],
            options={
                'db_table': 'video_views',
            },
        ),
        migrations.CreateModel(
            name='WatchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_position', models.DurationField(default=datetime.timedelta(0))),
                ('watch_count', models.IntegerField(default=1)),
                ('last_watched', models.DateTimeField(auto_now=True)),
                ('first_watched', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watch_history', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_history', to='streamin_application.video')),
            ],
            options={
                'db_table': 'watch_history',
                'ordering': ['-last_watched'],
            },
        ),
        migrations.CreateModel(
            name='WatchLater',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watch_later', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watch_later_by', to='streamin_application.video')),
            ],
            options={
                'db_table': 'watch_later',
                'ordering': ['-added_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type', 'is_creator'], name='users_user_ty_a347ca_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='users_is_veri_63cd6e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='commentlike',
            unique_together={('comment', 'user')},
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['participant1', 'participant2'], name='conversatio_partici_1b0043_idx'),
        ),
        migrations.AddIndex(
            model_name='creatoranalytics',
            index=models.Index(fields=['creator', '-date'], name='creator_ana_creator_3d98b3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='creatoranalytics',
            unique_together={('creator', 'date')},
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['follower', 'following'], name='follows_followe_61a651_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='follow',
            unique_together={('follower', 'following')},
        ),
        migrations.AddIndex(
            model_name='livestream',
            index=models.Index(fields=['creator', 'status'], name='live_stream_creator_fccf3a_idx'),
        ),
        migrations.AddIndex(
            model_name='livestream',
            index=models.Index(fields=['status', '-scheduled_start'], name='live_stream_status_61f24c_idx'),
        ),
        migrations.AddIndex(
            model_name='livestreamchat',
            index=models.Index(fields=['stream', '-created_at'], name='live_stream_stream__ca76f6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='livestreamticket',
            unique_together={('stream', 'user')},
        ),
        migrations.AddIndex(
            model_name='livestreamviewer',
            index=models.Index(fields=['stream', 'is_active'], name='live_stream_stream__4c9a6f_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['conversation', 'created_at'], name='messages_convers_3ebb41_idx'),
        ),
        migrations.AddIndex(
            model_name='payoutrequest',
            index=models.Index(fields=['creator', 'status'], name='payout_requ_creator_a066a6_idx'),
        ),
        migrations.AddIndex(
            model_name='payoutrequest',
            index=models.Index(fields=['status', '-requested_at'], name='payout_requ_status_a296e6_idx'),
        ),
        migrations.AddIndex(
            model_name='playlist',
            index=models.Index(fields=['user', 'privacy'], name='playlists_user_id_2905e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='subscription',
            unique_together={('subscriber', 'creator')},
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user', 'badge')},
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['video_id'], name='videos_video_i_8c7929_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['creator', 'status'], name='videos_creator_3eec17_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['category', 'status'], name='videos_categor_bfaefb_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['video_type', 'status'], name='videos_video_t_c3b496_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['-view_count'], name='videos_view_co_2ce324_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['-published_at'], name='videos_publish_f97095_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['status', '-created_at'], name='reports_status_d7deb7_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['report_type', 'status'], name='reports_report__f9d8bf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='playlistvideo',
            unique_together={('playlist', 'video')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read', '-created_at'], name='notificatio_user_id_c4e471_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['video', '-created_at'], name='comments_video_i_adb6dd_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['user', '-created_at'], name='comments_user_id_a80af7_idx'),
        ),
        migrations.AddIndex(
            model_name='videoanalytics',
            index=models.Index(fields=['video', '-date'], name='video_analy_video_i_49834f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='videoanalytics',
            unique_together={('video', 'date')},
        ),
        migrations.AddIndex(
            model_name='videocall',
            index=models.Index(fields=['creator', 'status'], name='video_calls_creator_175d2e_idx'),
        ),
        migrations.AddIndex(
            model_name='videocall',
            index=models.Index(fields=['viewer', 'status'], name='video_calls_viewer__fb5853_idx'),
        ),
        migrations.AddIndex(
            model_name='earningsrecord',
            index=models.Index(fields=['creator', '-created_at'], name='earnings_re_creator_b29ad9_idx'),
        ),
        migrations.AddIndex(
            model_name='earningsrecord',
            index=models.Index(fields=['earnings_type', '-created_at'], name='earnings_re_earning_8c051d_idx'),
        ),
        migrations.AddIndex(
            model_name='videodownload',
            index=models.Index(fields=['user', '-created_at'], name='video_downl_user_id_f9fcb9_idx'),
        ),
        migrations.AddIndex(
            model_name='videodownload',
            index=models.Index(fields=['download_token'], name='video_downl_downloa_4876d6_idx'),
        ),
        migrations.AddIndex(
            model_name='videolike',
            index=models.Index(fields=['video', 'is_like'], name='video_likes_video_i_4c049f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='videolike',
            unique_together={('video', 'user')},
        ),
        migrations.AddIndex(
            model_name='videopurchase',
            index=models.Index(fields=['user', '-purchased_at'], name='video_purch_user_id_0047ba_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='videopurchase',
            unique_together={('video', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='videoquality',
            unique_together={('video', 'quality')},
        ),
        migrations.AddIndex(
            model_name='videorecommendation',
            index=models.Index(fields=['user', '-score'], name='video_recom_user_id_5a5864_idx'),
        ),
        migrations.AddIndex(
            model_name='videorecommendation',
            index=models.Index(fields=['video', 'is_clicked'], name='video_recom_video_i_5a5ebc_idx'),
        ),
        migrations.AddIndex(
            model_name='videoview',
            index=models.Index(fields=['video', '-viewed_at'], name='video_views_video_i_cf9cae_idx'),
        ),
        migrations.AddIndex(
            model_name='videoview',
            index=models.Index(fields=['user', '-viewed_at'], name='video_views_user_id_edfce1_idx'),
        ),
        migrations.AddIndex(
            model_name='watchhistory',
            index=models.Index(fields=['user', '-last_watched'], name='watch_histo_user_id_700983_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='watchhistory',
            unique_together={('user', 'video')},
        ),
        migrations.AlterUniqueTogether(
            name='watchlater',
            unique_together={('user', 'video')},
        ),
    ]
